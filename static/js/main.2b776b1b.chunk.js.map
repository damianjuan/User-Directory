{"version":3,"sources":["components/testHeader/index.js","components/Table/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","clearIcon","color","inputRoot","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","onChange","onClick","onSubmit","classes","className","AppBar","Toolbar","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","IconButton","EmployeeTable","results","sortByFirstName","rows","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableSortLabel","direction","TableBody","length","map","res","key","id","value","scope","Avatar","alt","name","first","src","picture","thumbnail","last","phone","email","location","city","state","colSpan","axios","get","App","displayedResults","userInput","handleInputChange","event","preventDefault","target","regexp","RegExp","filter","el","test","setState","handleClearInput","sort","a","b","nameA","nameB","API","then","data","catch","err","console","log","this","handleFormSubmit","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2b776b1b.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, InputBase } from '@material-ui/core'\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport App from '../../App';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    clearIcon: {\n        color: 'white'\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nexport default function SearchAppBar({ onChange, onClick, onSubmit }) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Employee Directory\n          </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Searchâ€¦\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                            onChange={onChange}\n                            onSubmit={onSubmit}\n                        />\n                        <IconButton onClick={onClick}>\n                            <ClearIcon className={classes.clearIcon} />\n                        </IconButton>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import React from 'react';\nimport { TableContainer, Paper, Table, TableHead, TableCell, TableBody, TableRow, Avatar, TableSortLabel } from '@material-ui/core';\nimport App from '../../App';\n\n//used class to store state\nfunction EmployeeTable({ results, sortByFirstName }) {\n\n    const rows = results;\n\n    return (\n        <TableContainer component={Paper} >\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell align=\"left\">\n                            <TableSortLabel\n\n                                direction={'des'}\n                                onClick={sortByFirstName}\n\n                            >Name</TableSortLabel></TableCell>\n                        <TableCell align=\"left\">Phone Number</TableCell>\n                        <TableCell align=\"left\">Email</TableCell>\n                        <TableCell align=\"left\">Location</TableCell>\n                    </TableRow>\n                </TableHead >\n                <TableBody>\n                    {rows.length ?\n\n                        rows.map((res) => (\n                            <TableRow key={res.id.value}>\n                                <TableCell component=\"th\" scope=\"rows\">\n                                    <Avatar alt={res.name.first} src={res.picture.thumbnail} />\n                                </TableCell>\n                                <TableCell align=\"left\">{res.name.first} {res.name.last}</TableCell>\n                                <TableCell align=\"left\">{res.phone}</TableCell>\n                                <TableCell align=\"left\">{res.email}</TableCell>\n                                <TableCell align=\"left\">{res.location.city},    {res.location.state}</TableCell>\n                            </TableRow>\n                        ))\n                        :\n                        <TableRow>\n                            <TableCell align=\"center\" colSpan={5}>No results found</TableCell>\n                        </TableRow>\n                    }\n                </TableBody>\n            </Table >\n        </TableContainer >\n\n    )\n};\n\nexport default EmployeeTable;","import axios from \"axios\";\r\nexport default {\r\n    // Gets all users\r\n    getUsers: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React, { Component } from 'react';\nimport './App.css';\nimport SearchAppBar from './components/testHeader';\nimport EmployeeTable from './components/Table';\nimport API from './utils/API'\n\n//class component to access input \nclass App extends Component {\n  state = {\n    results: [],\n    displayedResults: [],\n    userInput: \"\"\n  };\n  // when table component mounts get employees from API and assign to results and displayedResults. results is immutable. this prevents having to make an api call every time there is a need to go back to the full list of employees\n  componentDidMount() {\n    API.getUsers()\n      .then(res => this.setState({ results: res.data.results, displayedResults: res.data.results }))\n      .catch(err => console.log(err));\n  };\n\n  //update state with user input as it changes. filter display based on search as user types. need to add debounce for performance \n  handleInputChange = event => {\n    // Getting the value of the input which triggered the change\n    event.preventDefault();\n    let value = event.target.value;\n    const regexp = new RegExp(value, 'i');\n    const displayedResults = this.state.results.filter(el =>\n      regexp.test(el.name.first)\n      || regexp.test(el.name.last)\n      || regexp.test(el.name.last)\n      || regexp.test(el.phone)\n      || regexp.test(el.email)\n      || regexp.test(el.location.city)\n      || regexp.test(el.location.state)\n    );\n    this.setState({ displayedResults })\n  };\n\n  //when search input is cleared set displayResults back to original list of employee\n  handleClearInput = () => {\n    this.setState({ displayedResults: this.state.results })\n  }\n\n  //sort table by first name\n  sortByFirstName = () => {\n    const displayedResults = this.state.displayedResults.sort(compare)\n    function compare(a, b) {\n      const nameA = a.name.first;\n      const nameB = b.name.first;\n      if (nameA > nameB) {\n        return 1;\n      } else if (nameA < nameB) {\n        return -1\n      } else if (nameA === nameB) {\n        return 0;\n      }\n    }\n    this.setState({ displayedResults })\n  }\n\n\n  render() {\n    return (\n      <>\n        <SearchAppBar\n          onChange={this.handleInputChange}\n          onSubmit={this.handleFormSubmit}\n          state={this.state}\n          sortByFirstName={this.sortByFirstName}\n          onClick={this.handleClearInput} />\n        <EmployeeTable\n          sortByFirstName={this.sortByFirstName}\n          results={this.state.displayedResults}\n        />\n      </>\n    )\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}